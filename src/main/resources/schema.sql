-- Пользователи
CREATE TABLE IF NOT EXISTS USERS (
    USER_ID INTEGER NOT NULL AUTO_INCREMENT,
    USER_LOGIN VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255),
    EMAIL VARCHAR(255) NOT NULL,
    BIRTHDAY TIMESTAMP NOT NULL,
    CONSTRAINT USER_PK PRIMARY KEY (USER_ID)
);

-- Список друзей
CREATE TABLE IF NOT EXISTS FRIENDS (
    USER_ID INTEGER NOT NULL,
    FRIEND_ID INTEGER NOT NULL,
    CONSTRAINT USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FRIEND_FK FOREIGN KEY (FRIEND_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Жанры
CREATE TABLE IF NOT EXISTS GENRES (
    GENRE_ID INTEGER NOT NULL,
    GENRE_NAME VARCHAR(50),
    CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);

-- Рейтинг MPA
CREATE TABLE IF NOT EXISTS MPA (
	MPA_ID INTEGER NOT NULL,
	MPA_NAME VARCHAR(5) NOT NULL,
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);

-- Фильмы
CREATE TABLE IF NOT EXISTS FILMS (
    FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
    FILM_NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    RELEASE_DATE TIMESTAMP NOT NULL,
    DURATION INTEGER NOT NULL,
    MPA_ID INTEGER NOT NULL,
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT MPA_FK FOREIGN KEY (MPA_ID) REFERENCES MPA(MPA_ID)
);

-- Список лайков
CREATE TABLE IF NOT EXISTS LIKES (
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT FILM_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT LIKE_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Список жанров
CREATE TABLE IF NOT EXISTS GENRE_FILMS (
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	CONSTRAINT GENRE_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT GENRE_FK FOREIGN KEY (GENRE_ID) REFERENCES GENRES(GENRE_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

